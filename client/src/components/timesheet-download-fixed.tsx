import React from 'react';
import { Button } from '@/components/ui/button';
import { Download, FileText } from 'lucide-react';
import { toast } from '@/hooks/use-toast';

interface TimesheetDownloadProps {
  timesheet: any;
  variant?: 'default' | 'outline';
  size?: 'sm' | 'default' | 'lg';
}

export function TimesheetDownload({ timesheet, variant = 'outline', size = 'sm' }: TimesheetDownloadProps) {
  const handleDownload = async () => {
    try {
      // Create comprehensive timesheet document
      const content = `DAWAAM MANPOWER SERVICES
TIMESHEET REPORT
${'='.repeat(50)}

EMPLOYEE INFORMATION
Name: ${timesheet.firstName || 'N/A'} ${timesheet.lastName || 'N/A'}
Employee ID: ${timesheet.contractorId || 'N/A'}
Company: ${timesheet.companyName || 'Mela Ltd'}
Department: ${timesheet.department || 'N/A'}
Job Title: ${timesheet.jobTitle || 'N/A'}
Email: ${timesheet.email || 'N/A'}

TIMESHEET DETAILS
Document ID: ${timesheet.id}
Period: June 2025 (${timesheet.periodType || 'monthly'})
Rate Type: ${timesheet.rateType || 'hourly'}
Status: ${timesheet.status?.toUpperCase() || 'DRAFT'}

WORK SUMMARY
Total ${timesheet.rateType === 'daily' ? 'Days Worked' : 'Hours Worked'}: ${
  timesheet.rateType === 'daily' 
    ? (timesheet.totalDays || 0) + ' days'
    : (timesheet.totalHours || 0) + ' hours'
}

DETAILED WORK ENTRIES
${'='.repeat(50)}
${(timesheet.entries || []).map((entry: any, index: number) => `
Entry ${index + 1}:
  Date: ${entry.date || 'Not specified'}
  Start Time: ${entry.startTime || 'Not specified'}
  End Time: ${entry.endTime || 'Not specified'}
  Hours Worked: ${entry.hoursWorked || 0}
  Location: ${entry.location || timesheet.location || 'Not specified'}
  Work Description: ${entry.workDescription || timesheet.workDescription || 'No description provided'}
`).join('\n')}

SUPERVISION INFORMATION
Supervisor Name: ${timesheet.supervisorName || 'Not assigned'}
Supervisor Email: ${timesheet.supervisorEmail || 'Not provided'}

APPROVAL TRACKING
Submitted: ${timesheet.submittedAt ? new Date(timesheet.submittedAt).toLocaleString() : 'Not submitted'}
${timesheet.approvedAt ? `Approved: ${new Date(timesheet.approvedAt).toLocaleString()}` : ''}
${timesheet.rejectedAt ? `Rejected: ${new Date(timesheet.rejectedAt).toLocaleString()}` : ''}
${timesheet.rejectionReason ? `Rejection Reason: ${timesheet.rejectionReason}` : ''}

DIGITAL SIGNATURES
Contractor Signature: ${timesheet.contractorSignature ? 'Digital signature attached' : 'Not signed'}
Supervisor Signature: ${timesheet.supervisorSignature ? 'Digital signature attached' : 'Not signed'}

DOCUMENT METADATA
Generated: ${new Date().toLocaleString()}
Generated By: Dawaam Timesheet Management System
Version: 1.0

${'='.repeat(50)}
This document contains confidential information.
DAWAAM - Manpower Services | Professional HR Solutions
${'='.repeat(50)}`;

      // Create file with proper encoding
      const blob = new Blob([content], { 
        type: 'text/plain;charset=utf-8' 
      });
      
      // Generate descriptive filename
      const filename = `Timesheet_${timesheet.firstName || 'Employee'}_${timesheet.lastName || ''}_ID${timesheet.id}_June2025.txt`.replace(/\s+/g, '_');
      
      // Create download link
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      link.style.display = 'none';
      
      // Trigger download
      document.body.appendChild(link);
      link.click();
      
      // Cleanup
      setTimeout(() => {
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      }, 100);

      toast({
        title: "Download Successful",
        description: `Timesheet downloaded as ${filename}`,
      });

    } catch (error) {
      console.error('Download error:', error);
      toast({
        title: "Download Failed",
        description: "Unable to download timesheet. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <Button
      variant={variant}
      size={size}
      onClick={handleDownload}
      title="Download timesheet document"
    >
      <Download className="h-4 w-4 mr-1" />
      Download
    </Button>
  );
}

export function TimesheetViewer({ timesheet }: { timesheet: any }) {
  const handleView = () => {
    try {
      const html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Timesheet - ${timesheet.firstName} ${timesheet.lastName}</title>
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            max-width: 900px; 
            margin: 0 auto; 
            padding: 20px; 
            line-height: 1.6; 
            color: #333;
        }
        .header { 
            text-align: center; 
            border-bottom: 3px solid #2c5282; 
            padding-bottom: 20px; 
            margin-bottom: 30px; 
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
        }
        .company { 
            font-size: 28px; 
            font-weight: bold; 
            color: #2c5282; 
            margin-bottom: 10px; 
        }
        .title { 
            font-size: 22px; 
            color: #2c5282; 
            margin-bottom: 10px;
        }
        .section { 
            margin: 25px 0; 
            padding: 20px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            background: #ffffff;
        }
        .section h3 {
            color: #2c5282;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        .label { 
            font-weight: bold; 
            color: #495057;
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
            margin: 15px 0; 
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        th, td { 
            border: 1px solid #dee2e6; 
            padding: 12px; 
            text-align: left; 
        }
        th { 
            background-color: #f8f9fa; 
            font-weight: bold; 
            color: #495057;
        }
        tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        .status-badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }
        .status-submitted { background: #ffeaa7; color: #2d3436; }
        .status-approved { background: #00b894; color: white; }
        .status-rejected { background: #e17055; color: white; }
        .status-draft { background: #74b9ff; color: white; }
        .footer { 
            margin-top: 40px; 
            text-align: center; 
            font-size: 12px; 
            color: #6c757d; 
            padding: 20px;
            border-top: 2px solid #e9ecef;
        }
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        @media print { 
            body { margin: 10px; } 
            .section { break-inside: avoid; }
        }
        @media (max-width: 768px) {
            .info-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="company">DAWAAM - MANPOWER SERVICES</div>
        <div class="title">TIMESHEET REPORT</div>
        <p>June 2025 | Document ID: ${timesheet.id}</p>
    </div>
    
    <div class="section">
        <h3>Employee Information</h3>
        <div class="info-grid">
            <div>
                <p><span class="label">Name:</span> ${timesheet.firstName || 'N/A'} ${timesheet.lastName || 'N/A'}</p>
                <p><span class="label">Company:</span> ${timesheet.companyName || 'Mela Ltd'}</p>
                <p><span class="label">Department:</span> ${timesheet.department || 'N/A'}</p>
            </div>
            <div>
                <p><span class="label">Job Title:</span> ${timesheet.jobTitle || 'N/A'}</p>
                <p><span class="label">Employee ID:</span> ${timesheet.contractorId || 'N/A'}</p>
                <p><span class="label">Status:</span> <span class="status-badge status-${timesheet.status || 'draft'}">${(timesheet.status || 'draft').toUpperCase()}</span></p>
            </div>
        </div>
    </div>
    
    <div class="section">
        <h3>Work Summary</h3>
        <div class="info-grid">
            <div>
                <p><span class="label">Total:</span> ${timesheet.rateType === 'daily' ? (timesheet.totalDays || 0) + ' days' : (timesheet.totalHours || 0) + ' hours'}</p>
                <p><span class="label">Rate Type:</span> ${timesheet.rateType || 'hourly'}</p>
            </div>
            <div>
                <p><span class="label">Period Type:</span> ${timesheet.periodType || 'weekly'}</p>
                <p><span class="label">Work Location:</span> ${timesheet.location || 'Various'}</p>
            </div>
        </div>
    </div>
    
    <div class="section">
        <h3>Detailed Work Entries</h3>
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Start Time</th>
                    <th>End Time</th>
                    <th>Hours</th>
                    <th>Location</th>
                    <th>Work Description</th>
                </tr>
            </thead>
            <tbody>
                ${(timesheet.entries || []).map((entry: any) => `
                <tr>
                    <td>${entry.date || 'N/A'}</td>
                    <td>${entry.startTime || 'N/A'}</td>
                    <td>${entry.endTime || 'N/A'}</td>
                    <td>${entry.hoursWorked || 0}</td>
                    <td>${entry.location || timesheet.location || 'N/A'}</td>
                    <td>${entry.workDescription || timesheet.workDescription || 'Standard duties'}</td>
                </tr>
                `).join('')}
            </tbody>
        </table>
    </div>
    
    <div class="section">
        <h3>Supervision & Approval</h3>
        <div class="info-grid">
            <div>
                <p><span class="label">Supervisor:</span> ${timesheet.supervisorName || 'Not assigned'}</p>
                <p><span class="label">Supervisor Email:</span> ${timesheet.supervisorEmail || 'Not provided'}</p>
                <p><span class="label">Submitted:</span> ${timesheet.submittedAt ? new Date(timesheet.submittedAt).toLocaleString() : 'Not submitted'}</p>
            </div>
            <div>
                ${timesheet.approvedAt ? `<p><span class="label">Approved:</span> ${new Date(timesheet.approvedAt).toLocaleString()}</p>` : ''}
                ${timesheet.rejectedAt ? `<p><span class="label">Rejected:</span> ${new Date(timesheet.rejectedAt).toLocaleString()}</p>` : ''}
                ${timesheet.rejectionReason ? `<p><span class="label">Rejection Reason:</span> ${timesheet.rejectionReason}</p>` : ''}
                <p><span class="label">Digital Signatures:</span> ${timesheet.contractorSignature ? '✓' : '✗'} Contractor | ${timesheet.supervisorSignature ? '✓' : '✗'} Supervisor</p>
            </div>
        </div>
    </div>
    
    <div class="footer">
        <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
        <p>DAWAAM - Manpower Services | Professional HR Solutions</p>
        <p>This document contains confidential employment information</p>
    </div>
</body>
</html>`;

      const newWindow = window.open('', '_blank', 'width=900,height=700,scrollbars=yes,resizable=yes');
      if (newWindow) {
        newWindow.document.write(html);
        newWindow.document.close();
        newWindow.focus();
      } else {
        toast({
          title: "Popup Blocked",
          description: "Please allow popups to view the timesheet",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('View error:', error);
      toast({
        title: "View Failed",
        description: "Unable to open timesheet viewer",
        variant: "destructive",
      });
    }
  };

  return (
    <Button
      variant="outline"
      size="sm"
      onClick={handleView}
      title="View timesheet details"
    >
      <FileText className="h-4 w-4 mr-1" />
      View
    </Button>
  );
}